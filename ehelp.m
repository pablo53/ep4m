function ehelp()
  
  disp(sprintf(""));
  disp(sprintf("E-Package-4-M contains the following functions:"));
  disp(sprintf(""));
  disp(sprintf("eabcd02abcd: converts ABCD normalized matrix into ABCD matrix (transmission matrix)."));
  disp(sprintf("eabcd2abcd0: converts ABCD-matrix (transmission matrix) into ABCD normalized matrix."));
  disp(sprintf("eabcd2tv: Converts ABCD matrix into its topology together with values"));
  disp(sprintf("eall2turns: calculates the number of turns on a core with the givel Al and required inductance."));
  disp(sprintf("ealturns2l: calculates the inductance for a core with the givel Al and number of turns."));
  disp(sprintf("eattenuator: Computes an attenuator."));
  disp(sprintf("eboltzman: Returns Boltzman's constant."));
  disp(sprintf("ec: speed of light."));
  disp(sprintf("ecoupledres: Creates a ladder of coupled resonators."));
  disp(sprintf("edbm2v: Converts voltage/power expressed in dBm into Volts"));
  disp(sprintf("eelectroncharge: electron charge in coulombs"));
  disp(sprintf("efiltermesh: Creates simple narrow band pass filter."));
  disp(sprintf("efmtstr: formats values so as it to be more human readable, scales using prefixes: femto, pico, nano, and so on..."));
  disp(sprintf("efreqanalyze: perform net analysis in the given frequency domain"));
  disp(sprintf("efreqlc: Calculates the frequency and the characteristic impedance of an LC tank."));
  disp(sprintf("efreqrc: Calculates the characteristic frequency of an RC circuit."));
  disp(sprintf("ef2t: converts f-matrix (hybrid F matrix) into t-matrix (ABCD transfer matrix)."));
  disp(sprintf("ehc2hb: converts h-matrix for common collector configuration into h-matrix for common base configuration."));
  disp(sprintf("ehc2he: converts h-matrix for common collector configuration into h-matrix for common emmiter configuration."));
  disp(sprintf("ehe2hb: converts h-matrix for common emmiter configuration into h-matrix for common base configuration."));
  disp(sprintf("ehe2hc: converts h-matrix for common emmiter configuration into h-matrix for common collector configuration."));
  disp(sprintf("ehe2superb: converts h-matrices for common emmiter configuration into h-matrix for common emmiter in super-beta configuration."));
  disp(sprintf("ehb2supera: converts h-matrices for common base configuration into h-matrix for common base in super-alpha configuration."));
  disp(sprintf("eh2t: converts h-matrix (hybrid H matrix) into t-matrix (ABCD transfer matrix)."));
  disp(sprintf("eh2y: converts hybrid matrix into admittance matrix."));
  disp(sprintf("eh2z: converts hybrid matrix into impedance matrix."));
  disp(sprintf("eii: calculates the impedance of two parallel impedances"));
  disp(sprintf("eimpc: calculates the impedance of given capacity at given frequency"));
  disp(sprintf("eimpl: calculates the impedance of given inductance at given frequency"));
  disp(sprintf("eimpmatch: produces LC impedance mathing topology."));
  disp(sprintf("eimpmatchbutt: produces LC ladder impedance matching topology as a Butterworth Low-Pass Filter."));
  disp(sprintf("eimpmatchcheb: produces LC ladder impedance matching topology as a Chebyshev Low-Pass Filter."));
  disp(sprintf("eimpmatchtapc: impedance matching with tap capacity"));
  disp(sprintf("eisshunt: checks whether the element is a shunt one"));
  disp(sprintf("ei2dbm: computes power in dBm based on current and impedance."));
  disp(sprintf("ej: calculates complex number from magnitude and angle"));
  disp(sprintf("ejoin: concatenates two topologies and their values"));
  disp(sprintf("ekfilter: const-k type, m-derivative filter."));
  disp(sprintf("ekuroda: transforms the net with Kuroda's identities."));
  disp(sprintf("ekurodaall: transforms the whole net with Kuroda's identities."));
  disp(sprintf("elinvill: calulates Linvill stability factor from ABCD transfer parameters"));
  disp(sprintf("emag: calulates maximum available gain [dB] from S parameters"));
  disp(sprintf("ematchattenuator: Computes a matching attenuator."));
  disp(sprintf("emstripimp: approximates characteristic impedance of a microstrip line with given geometry"));
  disp(sprintf("emu0: vacuum magnetic permeability"));
  disp(sprintf("enbbutt: creates a Butterworth narrow band pass filter"));
  disp(sprintf("enbcheb: creates a Chebyshev narrow band pass filter"));
  disp(sprintf("epolypow: the q-th power of p"));
  disp(sprintf("epolyreblin: bilinear transformation, i.e. puts s = 2/T * (z+1)/(z-1)."));
  disp(sprintf("enbimpinv: creates a narrow band impedance inverter mesh for a given frequency and transconductance"));
  disp(sprintf("enoiseminsignal: Calculates minimal signal for the required signal-to-noise ratio."));
  disp(sprintf("enoiseshottky: Computes shot noise."));
  disp(sprintf("enoisethermal: Computes thermal noise."));
  disp(sprintf("eplanck: Returns Planck constant."));
  disp(sprintf("eprintladder: prints mesh based on its topology and its element values"));
  disp(sprintf("eproto2butt: gives a prototype Butterworth filter"));
  disp(sprintf("eproto2cheb1: gives a prototype Chebyshev filter"));
  disp(sprintf("eprtcoil: the inductance of a printed coil"));
  disp(sprintf("eps0: vacuum electric permittivity"));
  disp(sprintf("ereduce: reduces mesh (i.e. topology and its element values)"));
  disp(sprintf("eresonator: creates series or parallel LC resonator."));
  disp(sprintf("eresonatorq: Creates parallel LC resonator with the given loaded Q."));
  disp(sprintf("ereverse: inverse the ladder"));
  disp(sprintf("erollet: calulates Rollet stability factor (K) from S parameters"));
  disp(sprintf("eround: rounds the given value to the nearest E? series value (e.g. E6, E12, etc.)"));
  disp(sprintf("esallenkeybpfilter: creates the ladder for a Sallen-Key band pass filter"));
  disp(sprintf("escalefilter: transforms prototype filter into the required one (band pass, lower pass, upper pass or pass stop)"));
  disp(sprintf("estern: calulates Stern stability factor from ABCD transfer parameters"));
  disp(sprintf("et: returns transmission matrix(ABCD) for given element and its value at a certain frequency"));
  disp(sprintf("etllen: calculates transmission line length for a given velocity factor and time"));
  disp(sprintf("etrackind: approximates PCB track inductance"));
  disp(sprintf("ets2s: converts t-matrix (scattering transfer matrix) into s-matrix (scattering matrix)."));
  disp(sprintf("etv2abcd: Calculates transmission ABCD matrix values for a ladder at given frequency "));
  disp(sprintf("et2f: converts t-matrix (ABCD transfer matrix) into f-matrix (hybrid F matrix)."));
  disp(sprintf("et2h: converts t-matrix (ABCD transfer matrix) into h-matrix (hybrid H matrix)."));
  disp(sprintf("et2y: converts ABCD transfer matrix into y-matrix (admittance matrix)."));
  disp(sprintf("et2z: converts t-matrix (ABCD transfer matrix) into z-matrix (impedance matrix)."));
  disp(sprintf("es2ts: converts s-matrix (scattering matrix) into t-matrix (scattering transfer matrix)."));
  disp(sprintf("es2y: converts s-matrix (scattering parameters matrix) into y-matrix (admittance matrix)"));
  disp(sprintf("evempty: returns blank element for topology values vector"));
  disp(sprintf("ev2dbm: Converts voltage into dBm"));
  disp(sprintf("eyb2ye: converts y-matrix for common base configuration into y-matrix for common emmiter configuration."));
  disp(sprintf("eyc2ye: converts y-matrix for common collector configuration into y-matrix for common emmiter configuration."));
  disp(sprintf("eye2yb: converts y-matrix for common emmiter configuration into y-matrix for common base configuration."));
  disp(sprintf("eye2yc: converts y-matrix for common emmiter configuration into y-matrix for common collector configuration."));
  disp(sprintf("ey2h: converts admittance matrix into hybrid matrix."));
  disp(sprintf("ey2s: converts y-matrix (admittance matrix) into s-matrix (scattering parameters matrix)"));
  disp(sprintf("ey2t: converts y-matrix (admittance matrix) into t-matrix (ABCD transfer matrix)"));
  disp(sprintf("ey2z: converts admittance matrix into impedance matrix."));
  disp(sprintf("ez2h: converts impedance matrix into hybrid matrix."));
  disp(sprintf("ez2t: converts z-matrix (impedance matrix) into t-matrix (ABCD transfer matrix)."));
  disp(sprintf("ez2y: converts impedance matrix into admittance matrix."));
  disp(sprintf(""));
  
endfunction